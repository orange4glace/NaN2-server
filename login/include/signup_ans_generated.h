// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIGNUPANS_NAN2_LOGIN_H_
#define FLATBUFFERS_GENERATED_SIGNUPANS_NAN2_LOGIN_H_

#include "flatbuffers/flatbuffers.h"

namespace nan2 {
namespace login {

struct SignupAns;

enum S_ANS {
  S_ANS_SUCC = 0,
  S_ANS_FAIL = 1,
  S_ANS_FAIL_REGISTERED = 2,
  S_ANS_MIN = S_ANS_SUCC,
  S_ANS_MAX = S_ANS_FAIL_REGISTERED
};

inline const char **EnumNamesS_ANS() {
  static const char *names[] = {
    "SUCC",
    "FAIL",
    "FAIL_REGISTERED",
    nullptr
  };
  return names;
}

inline const char *EnumNameS_ANS(S_ANS e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesS_ANS()[index];
}

struct SignupAns FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ANS = 4,
    VT_USER_TAG = 6
  };
  S_ANS ans() const {
    return static_cast<S_ANS>(GetField<int8_t>(VT_ANS, 0));
  }
  const flatbuffers::String *user_tag() const {
    return GetPointer<const flatbuffers::String *>(VT_USER_TAG);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_ANS) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_USER_TAG) &&
           verifier.Verify(user_tag()) &&
           verifier.EndTable();
  }
};

struct SignupAnsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ans(S_ANS ans) {
    fbb_.AddElement<int8_t>(SignupAns::VT_ANS, static_cast<int8_t>(ans), 0);
  }
  void add_user_tag(flatbuffers::Offset<flatbuffers::String> user_tag) {
    fbb_.AddOffset(SignupAns::VT_USER_TAG, user_tag);
  }
  SignupAnsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SignupAnsBuilder &operator=(const SignupAnsBuilder &);
  flatbuffers::Offset<SignupAns> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<SignupAns>(end);
    return o;
  }
};

inline flatbuffers::Offset<SignupAns> CreateSignupAns(
    flatbuffers::FlatBufferBuilder &_fbb,
    S_ANS ans = S_ANS_SUCC,
    flatbuffers::Offset<flatbuffers::String> user_tag = 0) {
  SignupAnsBuilder builder_(_fbb);
  builder_.add_user_tag(user_tag);
  builder_.add_ans(ans);
  return builder_.Finish();
}

inline flatbuffers::Offset<SignupAns> CreateSignupAnsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    S_ANS ans = S_ANS_SUCC,
    const char *user_tag = nullptr) {
  return nan2::login::CreateSignupAns(
      _fbb,
      ans,
      user_tag ? _fbb.CreateString(user_tag) : 0);
}

inline const nan2::login::SignupAns *GetSignupAns(const void *buf) {
  return flatbuffers::GetRoot<nan2::login::SignupAns>(buf);
}

inline bool VerifySignupAnsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<nan2::login::SignupAns>(nullptr);
}

inline void FinishSignupAnsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<nan2::login::SignupAns> root) {
  fbb.Finish(root);
}

}  // namespace login
}  // namespace nan2

#endif  // FLATBUFFERS_GENERATED_SIGNUPANS_NAN2_LOGIN_H_
