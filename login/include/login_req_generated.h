// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOGINREQ_NAN2_LOGIN_H_
#define FLATBUFFERS_GENERATED_LOGINREQ_NAN2_LOGIN_H_

#include "flatbuffers/flatbuffers.h"

namespace nan2 {
namespace login {

struct LoginReq;

struct LoginReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_UUID = 4
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_UUID) &&
           verifier.Verify(uuid()) &&
           verifier.EndTable();
  }
};

struct LoginReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(LoginReq::VT_UUID, uuid);
  }
  LoginReqBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LoginReqBuilder &operator=(const LoginReqBuilder &);
  flatbuffers::Offset<LoginReq> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<LoginReq>(end);
    return o;
  }
};

inline flatbuffers::Offset<LoginReq> CreateLoginReq(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0) {
  LoginReqBuilder builder_(_fbb);
  builder_.add_uuid(uuid);
  return builder_.Finish();
}

inline flatbuffers::Offset<LoginReq> CreateLoginReqDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr) {
  return nan2::login::CreateLoginReq(
      _fbb,
      uuid ? _fbb.CreateString(uuid) : 0);
}

inline const nan2::login::LoginReq *GetLoginReq(const void *buf) {
  return flatbuffers::GetRoot<nan2::login::LoginReq>(buf);
}

inline bool VerifyLoginReqBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<nan2::login::LoginReq>(nullptr);
}

inline void FinishLoginReqBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<nan2::login::LoginReq> root) {
  fbb.Finish(root);
}

}  // namespace login
}  // namespace nan2

#endif  // FLATBUFFERS_GENERATED_LOGINREQ_NAN2_LOGIN_H_
