// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAYER_NAN2_GAME_WORLD_H_
#define FLATBUFFERS_GENERATED_PLAYER_NAN2_GAME_WORLD_H_

#include "flatbuffers/flatbuffers.h"

#include "bullet_generated.h"
#include "character_generated.h"
#include "entity_obtained_generated.h"
#include "vec2_generated.h"

namespace nan2 {
namespace game {
namespace world {

struct Player;

struct Player FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_LAST_INPUT_ACKED_PACKET = 6,
    VT_LAST_INPUT_REMAINING_TIME = 8,
    VT_CHARACTER = 10
  };
  uint8_t id() const {
    return GetField<uint8_t>(VT_ID, 0);
  }
  uint32_t last_input_acked_packet() const {
    return GetField<uint32_t>(VT_LAST_INPUT_ACKED_PACKET, 0);
  }
  uint32_t last_input_remaining_time() const {
    return GetField<uint32_t>(VT_LAST_INPUT_REMAINING_TIME, 0);
  }
  const nan2::game::world::Character *character() const {
    return GetPointer<const nan2::game::world::Character *>(VT_CHARACTER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ID) &&
           VerifyField<uint32_t>(verifier, VT_LAST_INPUT_ACKED_PACKET) &&
           VerifyField<uint32_t>(verifier, VT_LAST_INPUT_REMAINING_TIME) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CHARACTER) &&
           verifier.VerifyTable(character()) &&
           verifier.EndTable();
  }
};

struct PlayerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint8_t id) {
    fbb_.AddElement<uint8_t>(Player::VT_ID, id, 0);
  }
  void add_last_input_acked_packet(uint32_t last_input_acked_packet) {
    fbb_.AddElement<uint32_t>(Player::VT_LAST_INPUT_ACKED_PACKET, last_input_acked_packet, 0);
  }
  void add_last_input_remaining_time(uint32_t last_input_remaining_time) {
    fbb_.AddElement<uint32_t>(Player::VT_LAST_INPUT_REMAINING_TIME, last_input_remaining_time, 0);
  }
  void add_character(flatbuffers::Offset<nan2::game::world::Character> character) {
    fbb_.AddOffset(Player::VT_CHARACTER, character);
  }
  PlayerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlayerBuilder &operator=(const PlayerBuilder &);
  flatbuffers::Offset<Player> Finish() {
    const auto end = fbb_.EndTable(start_, 4);
    auto o = flatbuffers::Offset<Player>(end);
    return o;
  }
};

inline flatbuffers::Offset<Player> CreatePlayer(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t id = 0,
    uint32_t last_input_acked_packet = 0,
    uint32_t last_input_remaining_time = 0,
    flatbuffers::Offset<nan2::game::world::Character> character = 0) {
  PlayerBuilder builder_(_fbb);
  builder_.add_character(character);
  builder_.add_last_input_remaining_time(last_input_remaining_time);
  builder_.add_last_input_acked_packet(last_input_acked_packet);
  builder_.add_id(id);
  return builder_.Finish();
}

}  // namespace world
}  // namespace game
}  // namespace nan2

#endif  // FLATBUFFERS_GENERATED_PLAYER_NAN2_GAME_WORLD_H_
