// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WORLD_NAN2_GAME_WORLD_H_
#define FLATBUFFERS_GENERATED_WORLD_NAN2_GAME_WORLD_H_

#include "flatbuffers/flatbuffers.h"

#include "bullet_generated.h"
#include "character_generated.h"
#include "player_generated.h"

namespace nan2 {
namespace game {
namespace world {

struct World;

struct World FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PLAYERS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<nan2::game::world::Player>> *players() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<nan2::game::world::Player>> *>(VT_PLAYERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PLAYERS) &&
           verifier.Verify(players()) &&
           verifier.VerifyVectorOfTables(players()) &&
           verifier.EndTable();
  }
};

struct WorldBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_players(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<nan2::game::world::Player>>> players) {
    fbb_.AddOffset(World::VT_PLAYERS, players);
  }
  WorldBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WorldBuilder &operator=(const WorldBuilder &);
  flatbuffers::Offset<World> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<World>(end);
    return o;
  }
};

inline flatbuffers::Offset<World> CreateWorld(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<nan2::game::world::Player>>> players = 0) {
  WorldBuilder builder_(_fbb);
  builder_.add_players(players);
  return builder_.Finish();
}

inline flatbuffers::Offset<World> CreateWorldDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<nan2::game::world::Player>> *players = nullptr) {
  return nan2::game::world::CreateWorld(
      _fbb,
      players ? _fbb.CreateVector<flatbuffers::Offset<nan2::game::world::Player>>(*players) : 0);
}

inline const nan2::game::world::World *GetWorld(const void *buf) {
  return flatbuffers::GetRoot<nan2::game::world::World>(buf);
}

inline bool VerifyWorldBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<nan2::game::world::World>(nullptr);
}

inline void FinishWorldBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<nan2::game::world::World> root) {
  fbb.Finish(root);
}

}  // namespace world
}  // namespace game
}  // namespace nan2

#endif  // FLATBUFFERS_GENERATED_WORLD_NAN2_GAME_WORLD_H_
