// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAYERINPUT_NAN2_GAME_WORLD_H_
#define FLATBUFFERS_GENERATED_PLAYERINPUT_NAN2_GAME_WORLD_H_

#include "flatbuffers/flatbuffers.h"

namespace nan2 {
namespace game {
namespace world {

struct PlayerInput;

struct PlayerInput FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SEQUENCE = 4,
    VT_MOVE_DIR = 6,
    VT_FIRE_DIR = 8,
    VT_TIME = 10
  };
  uint32_t sequence() const {
    return GetField<uint32_t>(VT_SEQUENCE, 0);
  }
  uint8_t move_dir() const {
    return GetField<uint8_t>(VT_MOVE_DIR, 0);
  }
  uint8_t fire_dir() const {
    return GetField<uint8_t>(VT_FIRE_DIR, 0);
  }
  int32_t time() const {
    return GetField<int32_t>(VT_TIME, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SEQUENCE) &&
           VerifyField<uint8_t>(verifier, VT_MOVE_DIR) &&
           VerifyField<uint8_t>(verifier, VT_FIRE_DIR) &&
           VerifyField<int32_t>(verifier, VT_TIME) &&
           verifier.EndTable();
  }
};

struct PlayerInputBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sequence(uint32_t sequence) {
    fbb_.AddElement<uint32_t>(PlayerInput::VT_SEQUENCE, sequence, 0);
  }
  void add_move_dir(uint8_t move_dir) {
    fbb_.AddElement<uint8_t>(PlayerInput::VT_MOVE_DIR, move_dir, 0);
  }
  void add_fire_dir(uint8_t fire_dir) {
    fbb_.AddElement<uint8_t>(PlayerInput::VT_FIRE_DIR, fire_dir, 0);
  }
  void add_time(int32_t time) {
    fbb_.AddElement<int32_t>(PlayerInput::VT_TIME, time, 0);
  }
  PlayerInputBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlayerInputBuilder &operator=(const PlayerInputBuilder &);
  flatbuffers::Offset<PlayerInput> Finish() {
    const auto end = fbb_.EndTable(start_, 4);
    auto o = flatbuffers::Offset<PlayerInput>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlayerInput> CreatePlayerInput(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t sequence = 0,
    uint8_t move_dir = 0,
    uint8_t fire_dir = 0,
    int32_t time = 0) {
  PlayerInputBuilder builder_(_fbb);
  builder_.add_time(time);
  builder_.add_sequence(sequence);
  builder_.add_fire_dir(fire_dir);
  builder_.add_move_dir(move_dir);
  return builder_.Finish();
}

inline const nan2::game::world::PlayerInput *GetPlayerInput(const void *buf) {
  return flatbuffers::GetRoot<nan2::game::world::PlayerInput>(buf);
}

inline bool VerifyPlayerInputBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<nan2::game::world::PlayerInput>(nullptr);
}

inline void FinishPlayerInputBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<nan2::game::world::PlayerInput> root) {
  fbb.Finish(root);
}

}  // namespace world
}  // namespace game
}  // namespace nan2

#endif  // FLATBUFFERS_GENERATED_PLAYERINPUT_NAN2_GAME_WORLD_H_
