// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BULLET_NAN2_GAME_WORLD_H_
#define FLATBUFFERS_GENERATED_BULLET_NAN2_GAME_WORLD_H_

#include "flatbuffers/flatbuffers.h"

namespace nan2 {
namespace game {
namespace world {

struct Vec2;

struct Bullet;

MANUALLY_ALIGNED_STRUCT(4) Vec2 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  Vec2() {
    memset(this, 0, sizeof(Vec2));
  }
  Vec2(const Vec2 &_o) {
    memcpy(this, &_o, sizeof(Vec2));
  }
  Vec2(float _x, float _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
};
STRUCT_END(Vec2, 8);

struct Bullet FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPE = 4,
    VT_POS = 6,
    VT_TIME = 8
  };
  uint8_t type() const {
    return GetField<uint8_t>(VT_TYPE, 0);
  }
  const Vec2 *pos() const {
    return GetStruct<const Vec2 *>(VT_POS);
  }
  float time() const {
    return GetField<float>(VT_TIME, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyField<Vec2>(verifier, VT_POS) &&
           VerifyField<float>(verifier, VT_TIME) &&
           verifier.EndTable();
  }
};

struct BulletBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(uint8_t type) {
    fbb_.AddElement<uint8_t>(Bullet::VT_TYPE, type, 0);
  }
  void add_pos(const Vec2 *pos) {
    fbb_.AddStruct(Bullet::VT_POS, pos);
  }
  void add_time(float time) {
    fbb_.AddElement<float>(Bullet::VT_TIME, time, 0.0f);
  }
  BulletBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BulletBuilder &operator=(const BulletBuilder &);
  flatbuffers::Offset<Bullet> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<Bullet>(end);
    return o;
  }
};

inline flatbuffers::Offset<Bullet> CreateBullet(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t type = 0,
    const Vec2 *pos = 0,
    float time = 0.0f) {
  BulletBuilder builder_(_fbb);
  builder_.add_time(time);
  builder_.add_pos(pos);
  builder_.add_type(type);
  return builder_.Finish();
}

}  // namespace world
}  // namespace game
}  // namespace nan2

#endif  // FLATBUFFERS_GENERATED_BULLET_NAN2_GAME_WORLD_H_
