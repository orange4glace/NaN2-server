// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAYERINPUTS_NAN2_GAME_WORLD_H_
#define FLATBUFFERS_GENERATED_PLAYERINPUTS_NAN2_GAME_WORLD_H_

#include "flatbuffers/flatbuffers.h"

#include "player_input_generated.h"

namespace nan2 {
namespace game {
namespace world {

struct PlayerInputs;

struct PlayerInputs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PLAYER_ID = 4,
    VT_INPUTS = 6
  };
  int32_t player_id() const {
    return GetField<int32_t>(VT_PLAYER_ID, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<nan2::game::world::PlayerInput>> *inputs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<nan2::game::world::PlayerInput>> *>(VT_INPUTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PLAYER_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_INPUTS) &&
           verifier.Verify(inputs()) &&
           verifier.VerifyVectorOfTables(inputs()) &&
           verifier.EndTable();
  }
};

struct PlayerInputsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_player_id(int32_t player_id) {
    fbb_.AddElement<int32_t>(PlayerInputs::VT_PLAYER_ID, player_id, 0);
  }
  void add_inputs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<nan2::game::world::PlayerInput>>> inputs) {
    fbb_.AddOffset(PlayerInputs::VT_INPUTS, inputs);
  }
  PlayerInputsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlayerInputsBuilder &operator=(const PlayerInputsBuilder &);
  flatbuffers::Offset<PlayerInputs> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<PlayerInputs>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlayerInputs> CreatePlayerInputs(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t player_id = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<nan2::game::world::PlayerInput>>> inputs = 0) {
  PlayerInputsBuilder builder_(_fbb);
  builder_.add_inputs(inputs);
  builder_.add_player_id(player_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlayerInputs> CreatePlayerInputsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t player_id = 0,
    const std::vector<flatbuffers::Offset<nan2::game::world::PlayerInput>> *inputs = nullptr) {
  return nan2::game::world::CreatePlayerInputs(
      _fbb,
      player_id,
      inputs ? _fbb.CreateVector<flatbuffers::Offset<nan2::game::world::PlayerInput>>(*inputs) : 0);
}

inline const nan2::game::world::PlayerInputs *GetPlayerInputs(const void *buf) {
  return flatbuffers::GetRoot<nan2::game::world::PlayerInputs>(buf);
}

inline bool VerifyPlayerInputsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<nan2::game::world::PlayerInputs>(nullptr);
}

inline void FinishPlayerInputsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<nan2::game::world::PlayerInputs> root) {
  fbb.Finish(root);
}

}  // namespace world
}  // namespace game
}  // namespace nan2

#endif  // FLATBUFFERS_GENERATED_PLAYERINPUTS_NAN2_GAME_WORLD_H_
