// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WORLDGUARANTEED_NAN2_GAME_WORLD_H_
#define FLATBUFFERS_GENERATED_WORLDGUARANTEED_NAN2_GAME_WORLD_H_

#include "flatbuffers/flatbuffers.h"

#include "entity_created_generated.h"
#include "vec2_generated.h"

namespace nan2 {
namespace game {
namespace world {

struct WorldGuaranteed;

struct WorldGuaranteed FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ENTITIES_CREATED = 4,
    VT_ENTITIES_DESTROIED = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<nan2::game::world::EntityCreated>> *entities_created() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<nan2::game::world::EntityCreated>> *>(VT_ENTITIES_CREATED);
  }
  const flatbuffers::Vector<uint16_t> *entities_destroied() const {
    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_ENTITIES_DESTROIED);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ENTITIES_CREATED) &&
           verifier.Verify(entities_created()) &&
           verifier.VerifyVectorOfTables(entities_created()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ENTITIES_DESTROIED) &&
           verifier.Verify(entities_destroied()) &&
           verifier.EndTable();
  }
};

struct WorldGuaranteedBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_entities_created(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<nan2::game::world::EntityCreated>>> entities_created) {
    fbb_.AddOffset(WorldGuaranteed::VT_ENTITIES_CREATED, entities_created);
  }
  void add_entities_destroied(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> entities_destroied) {
    fbb_.AddOffset(WorldGuaranteed::VT_ENTITIES_DESTROIED, entities_destroied);
  }
  WorldGuaranteedBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WorldGuaranteedBuilder &operator=(const WorldGuaranteedBuilder &);
  flatbuffers::Offset<WorldGuaranteed> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<WorldGuaranteed>(end);
    return o;
  }
};

inline flatbuffers::Offset<WorldGuaranteed> CreateWorldGuaranteed(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<nan2::game::world::EntityCreated>>> entities_created = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> entities_destroied = 0) {
  WorldGuaranteedBuilder builder_(_fbb);
  builder_.add_entities_destroied(entities_destroied);
  builder_.add_entities_created(entities_created);
  return builder_.Finish();
}

inline flatbuffers::Offset<WorldGuaranteed> CreateWorldGuaranteedDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<nan2::game::world::EntityCreated>> *entities_created = nullptr,
    const std::vector<uint16_t> *entities_destroied = nullptr) {
  return nan2::game::world::CreateWorldGuaranteed(
      _fbb,
      entities_created ? _fbb.CreateVector<flatbuffers::Offset<nan2::game::world::EntityCreated>>(*entities_created) : 0,
      entities_destroied ? _fbb.CreateVector<uint16_t>(*entities_destroied) : 0);
}

inline const nan2::game::world::WorldGuaranteed *GetWorldGuaranteed(const void *buf) {
  return flatbuffers::GetRoot<nan2::game::world::WorldGuaranteed>(buf);
}

inline bool VerifyWorldGuaranteedBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<nan2::game::world::WorldGuaranteed>(nullptr);
}

inline void FinishWorldGuaranteedBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<nan2::game::world::WorldGuaranteed> root) {
  fbb.Finish(root);
}

}  // namespace world
}  // namespace game
}  // namespace nan2

#endif  // FLATBUFFERS_GENERATED_WORLDGUARANTEED_NAN2_GAME_WORLD_H_
