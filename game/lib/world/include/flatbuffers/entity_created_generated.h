// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENTITYCREATED_NAN2_GAME_WORLD_H_
#define FLATBUFFERS_GENERATED_ENTITYCREATED_NAN2_GAME_WORLD_H_

#include "flatbuffers/flatbuffers.h"

#include "vec2_generated.h"

namespace nan2 {
namespace game {
namespace world {

struct EntityCreated;

struct EntityCreated FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_TYPE = 6,
    VT_POSITION = 8
  };
  uint16_t id() const {
    return GetField<uint16_t>(VT_ID, 0);
  }
  uint8_t type() const {
    return GetField<uint8_t>(VT_TYPE, 0);
  }
  const nan2::game::world::Vec2 *position() const {
    return GetStruct<const nan2::game::world::Vec2 *>(VT_POSITION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_ID) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyField<nan2::game::world::Vec2>(verifier, VT_POSITION) &&
           verifier.EndTable();
  }
};

struct EntityCreatedBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint16_t id) {
    fbb_.AddElement<uint16_t>(EntityCreated::VT_ID, id, 0);
  }
  void add_type(uint8_t type) {
    fbb_.AddElement<uint8_t>(EntityCreated::VT_TYPE, type, 0);
  }
  void add_position(const nan2::game::world::Vec2 *position) {
    fbb_.AddStruct(EntityCreated::VT_POSITION, position);
  }
  EntityCreatedBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EntityCreatedBuilder &operator=(const EntityCreatedBuilder &);
  flatbuffers::Offset<EntityCreated> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<EntityCreated>(end);
    return o;
  }
};

inline flatbuffers::Offset<EntityCreated> CreateEntityCreated(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t id = 0,
    uint8_t type = 0,
    const nan2::game::world::Vec2 *position = 0) {
  EntityCreatedBuilder builder_(_fbb);
  builder_.add_position(position);
  builder_.add_id(id);
  builder_.add_type(type);
  return builder_.Finish();
}

}  // namespace world
}  // namespace game
}  // namespace nan2

#endif  // FLATBUFFERS_GENERATED_ENTITYCREATED_NAN2_GAME_WORLD_H_
