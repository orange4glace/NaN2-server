// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GROUPREQ_NAN2_LOBBY_H_
#define FLATBUFFERS_GENERATED_GROUPREQ_NAN2_LOBBY_H_

#include "flatbuffers/flatbuffers.h"

namespace nan2 {
namespace lobby {

struct GroupReq;

enum G_REQ {
  G_REQ_REQ_JOIN = 0,
  G_REQ_REQ_OUT = 1,
  G_REQ_REQ_JOIN_AC = 2,
  G_REQ_REQ_JOIN_DN = 3,
  G_REQ_MIN = G_REQ_REQ_JOIN,
  G_REQ_MAX = G_REQ_REQ_JOIN_DN
};

inline const char **EnumNamesG_REQ() {
  static const char *names[] = {
    "REQ_JOIN",
    "REQ_OUT",
    "REQ_JOIN_AC",
    "REQ_JOIN_DN",
    nullptr
  };
  return names;
}

inline const char *EnumNameG_REQ(G_REQ e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesG_REQ()[index];
}

struct GroupReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_REQ = 4,
    VT_NTF_ID = 6,
    VT_USER_TAG = 8
  };
  G_REQ req() const {
    return static_cast<G_REQ>(GetField<int8_t>(VT_REQ, 0));
  }
  int32_t ntf_id() const {
    return GetField<int32_t>(VT_NTF_ID, 0);
  }
  const flatbuffers::String *user_tag() const {
    return GetPointer<const flatbuffers::String *>(VT_USER_TAG);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_REQ) &&
           VerifyField<int32_t>(verifier, VT_NTF_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_USER_TAG) &&
           verifier.Verify(user_tag()) &&
           verifier.EndTable();
  }
};

struct GroupReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_req(G_REQ req) {
    fbb_.AddElement<int8_t>(GroupReq::VT_REQ, static_cast<int8_t>(req), 0);
  }
  void add_ntf_id(int32_t ntf_id) {
    fbb_.AddElement<int32_t>(GroupReq::VT_NTF_ID, ntf_id, 0);
  }
  void add_user_tag(flatbuffers::Offset<flatbuffers::String> user_tag) {
    fbb_.AddOffset(GroupReq::VT_USER_TAG, user_tag);
  }
  GroupReqBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GroupReqBuilder &operator=(const GroupReqBuilder &);
  flatbuffers::Offset<GroupReq> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<GroupReq>(end);
    return o;
  }
};

inline flatbuffers::Offset<GroupReq> CreateGroupReq(
    flatbuffers::FlatBufferBuilder &_fbb,
    G_REQ req = G_REQ_REQ_JOIN,
    int32_t ntf_id = 0,
    flatbuffers::Offset<flatbuffers::String> user_tag = 0) {
  GroupReqBuilder builder_(_fbb);
  builder_.add_user_tag(user_tag);
  builder_.add_ntf_id(ntf_id);
  builder_.add_req(req);
  return builder_.Finish();
}

inline flatbuffers::Offset<GroupReq> CreateGroupReqDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    G_REQ req = G_REQ_REQ_JOIN,
    int32_t ntf_id = 0,
    const char *user_tag = nullptr) {
  return nan2::lobby::CreateGroupReq(
      _fbb,
      req,
      ntf_id,
      user_tag ? _fbb.CreateString(user_tag) : 0);
}

inline const nan2::lobby::GroupReq *GetGroupReq(const void *buf) {
  return flatbuffers::GetRoot<nan2::lobby::GroupReq>(buf);
}

inline bool VerifyGroupReqBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<nan2::lobby::GroupReq>(nullptr);
}

inline void FinishGroupReqBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<nan2::lobby::GroupReq> root) {
  fbb.Finish(root);
}

}  // namespace lobby
}  // namespace nan2

#endif  // FLATBUFFERS_GENERATED_GROUPREQ_NAN2_LOBBY_H_
