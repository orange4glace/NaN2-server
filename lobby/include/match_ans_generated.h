// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MATCHANS_NAN2_LOBBY_H_
#define FLATBUFFERS_GENERATED_MATCHANS_NAN2_LOBBY_H_

#include "flatbuffers/flatbuffers.h"

namespace nan2 {
namespace lobby {

struct MatchAns;

enum M_ANS {
  M_ANS_ANS_SUCC = 0,
  M_ANS_ANS_FAIL = 1,
  M_ANS_MIN = M_ANS_ANS_SUCC,
  M_ANS_MAX = M_ANS_ANS_FAIL
};

inline const char **EnumNamesM_ANS() {
  static const char *names[] = {
    "ANS_SUCC",
    "ANS_FAIL",
    nullptr
  };
  return names;
}

inline const char *EnumNameM_ANS(M_ANS e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesM_ANS()[index];
}

struct MatchAns FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ANS = 4
  };
  M_ANS ans() const {
    return static_cast<M_ANS>(GetField<int8_t>(VT_ANS, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_ANS) &&
           verifier.EndTable();
  }
};

struct MatchAnsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ans(M_ANS ans) {
    fbb_.AddElement<int8_t>(MatchAns::VT_ANS, static_cast<int8_t>(ans), 0);
  }
  MatchAnsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MatchAnsBuilder &operator=(const MatchAnsBuilder &);
  flatbuffers::Offset<MatchAns> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<MatchAns>(end);
    return o;
  }
};

inline flatbuffers::Offset<MatchAns> CreateMatchAns(
    flatbuffers::FlatBufferBuilder &_fbb,
    M_ANS ans = M_ANS_ANS_SUCC) {
  MatchAnsBuilder builder_(_fbb);
  builder_.add_ans(ans);
  return builder_.Finish();
}

inline const nan2::lobby::MatchAns *GetMatchAns(const void *buf) {
  return flatbuffers::GetRoot<nan2::lobby::MatchAns>(buf);
}

inline bool VerifyMatchAnsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<nan2::lobby::MatchAns>(nullptr);
}

inline void FinishMatchAnsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<nan2::lobby::MatchAns> root) {
  fbb.Finish(root);
}

}  // namespace lobby
}  // namespace nan2

#endif  // FLATBUFFERS_GENERATED_MATCHANS_NAN2_LOBBY_H_
